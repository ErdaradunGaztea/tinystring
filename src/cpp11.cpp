// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// code.cpp
cpp11::external_pointer<int> foo();
extern "C" SEXP _tinystring_foo() {
  BEGIN_CPP11
    return cpp11::as_sexp(foo());
  END_CPP11
}
// code.cpp
int baz(SEXP a);
extern "C" SEXP _tinystring_baz(SEXP a) {
  BEGIN_CPP11
    return cpp11::as_sexp(baz(cpp11::as_cpp<cpp11::decay_t<SEXP>>(a)));
  END_CPP11
}
// code.cpp
int bar(cpp11::external_pointer<int> a_pointer);
extern "C" SEXP _tinystring_bar(SEXP a_pointer) {
  BEGIN_CPP11
    return cpp11::as_sexp(bar(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<int>>>(a_pointer)));
  END_CPP11
}
// pack.cpp
cpp11::external_pointer<std::string> rcpp_pack(cpp11::strings x);
extern "C" SEXP _tinystring_rcpp_pack(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_pack(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(x)));
  END_CPP11
}
// pack.cpp
cpp11::r_string rcpp_unpack(cpp11::external_pointer<std::string> x);
extern "C" SEXP _tinystring_rcpp_unpack(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_unpack(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::string>>>(x)));
  END_CPP11
}
// pack.cpp
cpp11::external_pointer<std::vector<std::string>> rcpp_vpack(cpp11::strings x);
extern "C" SEXP _tinystring_rcpp_vpack(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_vpack(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(x)));
  END_CPP11
}
// pack.cpp
cpp11::writable::strings rcpp_vunpack(SEXP x);
extern "C" SEXP _tinystring_rcpp_vunpack(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_vunpack(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_tinystring_bar",          (DL_FUNC) &_tinystring_bar,          1},
    {"_tinystring_baz",          (DL_FUNC) &_tinystring_baz,          1},
    {"_tinystring_foo",          (DL_FUNC) &_tinystring_foo,          0},
    {"_tinystring_rcpp_pack",    (DL_FUNC) &_tinystring_rcpp_pack,    1},
    {"_tinystring_rcpp_unpack",  (DL_FUNC) &_tinystring_rcpp_unpack,  1},
    {"_tinystring_rcpp_vpack",   (DL_FUNC) &_tinystring_rcpp_vpack,   1},
    {"_tinystring_rcpp_vunpack", (DL_FUNC) &_tinystring_rcpp_vunpack, 1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_tinystring(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
