// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// r_flatten.cpp
SEXP rcpp_flatten(SEXP x);
extern "C" SEXP _tinystring_rcpp_flatten(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_flatten(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// r_length.cpp
cpp11::writable::integers rcpp_length(SEXP x);
extern "C" SEXP _tinystring_rcpp_length(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_length(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// r_length.cpp
unsigned long long rcpp_num_strings(SEXP x);
extern "C" SEXP _tinystring_rcpp_num_strings(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_num_strings(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// r_length.cpp
SEXP rcpp_set_length(SEXP x, const int size);
extern "C" SEXP _tinystring_rcpp_set_length(SEXP x, SEXP size) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_set_length(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<const int>>(size)));
  END_CPP11
}
// r_pack.cpp
SEXP rcpp_pack(const cpp11::strings & x, const cpp11::strings & alphabet);
extern "C" SEXP _tinystring_rcpp_pack(SEXP x, SEXP alphabet) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_pack(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings &>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings &>>(alphabet)));
  END_CPP11
}
// r_pack.cpp
cpp11::list rcpp_display(SEXP x);
extern "C" SEXP _tinystring_rcpp_display(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_display(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// r_recode.cpp
SEXP rcpp_recode(SEXP x, const cpp11::list_of<cpp11::strings> & recodes);
extern "C" SEXP _tinystring_rcpp_recode(SEXP x, SEXP recodes) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_recode(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::list_of<cpp11::strings> &>>(recodes)));
  END_CPP11
}
// r_recode.cpp
SEXP rcpp_ip_recode(SEXP x, const cpp11::list_of<cpp11::strings> & recodes);
extern "C" SEXP _tinystring_rcpp_ip_recode(SEXP x, SEXP recodes) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_ip_recode(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::list_of<cpp11::strings> &>>(recodes)));
  END_CPP11
}
// r_unpack.cpp
cpp11::strings rcpp_unpack(SEXP x);
extern "C" SEXP _tinystring_rcpp_unpack(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_unpack(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_tinystring_rcpp_display",     (DL_FUNC) &_tinystring_rcpp_display,     1},
    {"_tinystring_rcpp_flatten",     (DL_FUNC) &_tinystring_rcpp_flatten,     1},
    {"_tinystring_rcpp_ip_recode",   (DL_FUNC) &_tinystring_rcpp_ip_recode,   2},
    {"_tinystring_rcpp_length",      (DL_FUNC) &_tinystring_rcpp_length,      1},
    {"_tinystring_rcpp_num_strings", (DL_FUNC) &_tinystring_rcpp_num_strings, 1},
    {"_tinystring_rcpp_pack",        (DL_FUNC) &_tinystring_rcpp_pack,        2},
    {"_tinystring_rcpp_recode",      (DL_FUNC) &_tinystring_rcpp_recode,      2},
    {"_tinystring_rcpp_set_length",  (DL_FUNC) &_tinystring_rcpp_set_length,  2},
    {"_tinystring_rcpp_unpack",      (DL_FUNC) &_tinystring_rcpp_unpack,      1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_tinystring(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
